pipeline {
    agent any

    environment {
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
        BUILD_NUMBER_MINUS_ONE = "${BUILD_NUMBER.toInteger() - 1}"
    }

    stages {
        stage('Instalar Dependencias') {
            steps {
                bat 'composer install'
            }
        }
        // stage('Detener Contenedores Docker') {
        //     steps {
        //         script {
        //             def containerName = "store-1.0.0-${BUILD_NUMBER_MINUS_ONE}"
        //             def containerId = sh(script: "docker ps -q -f name=${containerName}", returnStdout: true).trim()
        //             if (containerId) {
        //                 sh "docker stop ${containerName}"
        //             } else {
        //                 echo "El contenedor '${containerName}' no existe."
        //             }
        //         }
        //     }
        // }

        stage('Construir Imagen Docker') {
            steps {
                bat "docker build -t store-${BRANCH_NAME}:1.0.0-${currentBuild.number} ."
            }
        }
        stage('Desplegar Imagen Docker') {
            steps {
                bat "docker run -d -p 80:80 --name store-1.0.0-${currentBuild.number} store-${BRANCH_NAME}:1.0.0-${currentBuild.number}"
            }
        }
    }

    post {
        success {
            echo 'Â¡El segundo pipeline se ha completado exitosamente! Contenedor ejecutandose'
        }
        failure {
            echo 'El segundo pipeline ha fallado!'
        }
    }
}